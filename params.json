{
  "name": "Unite Framework",
  "tagline": "The Unite Framework is a slim framework for Ionic 2 which provides a lot of convenience for implementing common stuff like lists, push notifications and menus.",
  "body": "The Unite Framework is a slim framework for Ionic 2 which provides a lot of convenience for implementing common stuff like lists, push notifications and menus. Essentially, it is a starter template for [Ionic 2](http://ionic.io/2).\r\n\r\n## How to use this template\r\n\r\n*This template does not work on its own*. It is missing the Ionic library, and AngularJS.\r\n\r\nTo use this, either create a new ionic project using the ionic node.js utility, or copy and paste this into an existing Cordova project and download a release of Ionic separately.\r\n\r\n### With the Ionic tool\r\n\r\nUse the `ionic start` command to initialise a new Ionic 2 project using the Unite framework. The framework uses TypeScript code, so make sure you use the `--ts` flag as below.\r\n\r\n```bash\r\n$ sudo npm install -g ionic@beta cordova\r\n$ ionic start my-unite-app https://github.com/appcarvers/unite-framework.git --v2 --ts\r\n```\r\n\r\nThen, to run it, cd into `my-unite-app` and run:\r\n\r\n```bash\r\n$ ionic run android\r\n```\r\n\r\n## Getting Started\r\n\r\n### Creating a list view\r\n\r\nCreate a new list view uing `ionic generate`\r\n\r\n```bash\r\n$ ionic generate page articles-list --ts\r\n```\r\n\r\nThen open up the newly created app/pages/articles-list/articles-list.ts and make the following changes to start using the power of Unite!\r\n\r\nImport Unite Framework\r\n```typescript\r\nimport {Page, NavController, NavParams} from 'ionic-angular';\r\nimport {UniteList} from '../../unite-framework/unitelist';\r\n\r\n@Page({\r\n  templateUrl: 'build/pages/articles-list/articles-list.html',\r\n  providers: [UniteList],\r\n})\r\n```\r\n\r\nUpdate the class with necessary configuration in the constructor\r\n```typescript\r\nexport class ArticlesListPage {\r\n\tselectedItem: any;\r\n\ticons: string[];\r\n\titems: any;\r\n\tunitelist: any;\r\n\r\n\tconstructor(private nav: NavController, navParams: NavParams, unitelist: UniteList) {\r\n\t\t// If we navigated to this page, we will have an item available as a nav param\r\n\t\tthis.selectedItem = navParams.get('item');\r\n\r\n\t\tthis.items = [];\r\n\t\t\r\n\t\t// API Definitions\r\n\t\tthis.unitelist = unitelist;\r\n\t\tthis.unitelist.url = 'http://172.132.45.138/ekstep/index.php?app=jlike&resource=annotations&option=com_api&format=raw&key=ed086fefc3b111c666378912f44d71ca0a70a8b6&content_id=17&type=annotation&subtype=collaborators&client=com_ekcontent&plg_type=content&plg_name=jlike_ekcontent&order=DESC&parent_id=0';\r\n\t\tthis.unitelist.limit = 10;\r\n\t\t\r\n\t\t// Loader Config\r\n\t\tthis.unitelist.loaderconfig.content = 'Hold Tight!';\r\n\t\t\r\n\t\tthis.loadData();\r\n\t\t\r\n\t}\r\n}\r\n```\r\n\r\nNext, add a new loadData() method to the class that will utilise the magic of Unite\r\n\r\n```typescript\r\n\tloadData() {\r\n\t\tthis.unitelist.getData().then((value: any) => {\r\n\t\t\tthis.items = this.items.concat(value.data.results);\r\n\t\t\t//console.log(value);\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n```\r\n\r\nUse the data returned by the API in your template (pages/articles-list/articles-list.html)\r\n\r\n```html\r\n<ion-navbar *navbar>\r\n\t<button menuToggle>\r\n    <ion-icon name=\"menu\"></ion-icon>\r\n  </button>\r\n\t<ion-title>Lists</ion-title>\r\n</ion-navbar>\r\n<ion-searchbar *ngIf=\"enableSearchbar\" [(ngModel)]=\"searchQuery\" (input)=\"getItems($event)\"></ion-searchbar>\r\n<ion-content>\r\n\t<ion-list>\r\n\t\t<ion-refresher *ngIf=\"enablePullToRefresh\" (refresh)=\"doRefresh($event)\">\r\n\t\t\t<ion-refresher-content></ion-refresher-content>\r\n\t\t</ion-refresher>\r\n\t\t<ion-item *ngFor=\"#item of items\" (click)=\"itemTapped($event, item)\">\r\n\t\t\t<ion-avatar item-left>\r\n\t\t\t\t<img src=\"{{item.user.avatar}}\">\r\n\t\t\t</ion-avatar>\r\n\t\t\t<h2>{{item.annotation_id}} {{item.user.name}}</h2>\r\n\t\t\t<p [innerHTML]=\"item.annotation_html\"></p>\r\n\t\t</ion-item>\r\n\t</ion-list>\r\n\t<ion-infinite-scroll (infinite)=\"loadData($event)\" threshold=\"5%\">\r\n\t\t<ion-infinite-scroll-content></ion-infinite-scroll-content>\r\n\t</ion-infinite-scroll>\r\n</ion-content>\r\n```\r\n## How to use unite toast\r\n\r\nunite toast uses ionic 2 native toast. We need to add [cordova toast plugin](http://ionicframework.com/docs/v2/native/toast/).\r\n\r\nThen open articles-list.ts and make the following changes to start using the power of Unite Toast!\r\n```typescript\r\nimport {Page, NavController, NavParams} from 'ionic-angular';\r\nimport {UniteList} from '../../unite-framework/unitelist';\r\nimport {UniteToast} from '../../unite-framework/unitetoast';\r\n\r\n@Page({\r\n  templateUrl: 'build/pages/articles-list/articles-list.html',\r\n  providers: [UniteList,UniteToast],\r\n})\r\n```\r\n\r\nUpdate the class with necessary configuration\r\n```typescript\r\nexport class ListPage {\r\n\tselectedItem: any;\r\n\titems: any;\r\n\tunitelist: any;\r\n\tbaseurl: string;\r\n\tsearchQuery: string;\r\n\tenableSearchbar: boolean;\r\n\tenablePullToRefresh: boolean;\r\n\tinfinitescroll: any;\r\n\tunitetoast: any;\r\n\tenableifinitescroll:boolean;\r\n\tconstructor(private nav: NavController, navParams: NavParams, unitelist: UniteList, uniteitem: UniteItem, unitetoast: UniteToast) {\r\n\t\t// If we navigated to this page, we will have an item available as a nav param\r\n\t\tthis.selectedItem = navParams.get('item');\r\n\t\tthis.items = [];\r\n\t\t// API Definitions\r\n\t\tthis.unitetoast = unitetoast;\r\n\t\tthis.unitelist = unitelist;\r\n\t\tthis.uniteitem = uniteitem;\r\n\t\tthis.unitelist.baseurl = 'http://172.132.45.45/joomla/investsure/index.php?option=com_api&app=content&resource=articles&format=raw&key=62edf1d7654d77cc424ca8e5ea8a1140';\r\n\t\tthis.unitelist.limit = 10;\r\n\t\tthis.searchQuery = '';\r\n\t\tthis.enableSearchbar = true;\r\n\t\tthis.enablePullToRefresh = true;\r\n\t\tthis.enableifinitescroll = false;\r\n\t\t// Loader Config\r\n\t\tthis.unitelist.loaderconfig.content = 'Hold Tight!';\r\n\t\t\r\n\t\t// Toaster Config\r\n\t\t\r\n\t\tthis.unitetoast.toastOptions.message = \"Something went wrong!\" //The message to display.\r\n\t\tthis.unitetoast.toastOptions.duration = \"3000\" //Duration to show the toast, either 'short', 'long' or any number of milliseconds: '1500'.\r\n\t\tthis.unitetoast.toastOptions.position = \"bottom\" //Where to position the toast, either 'top', 'center', or 'bottom'.\r\n\t\t\r\n\t\tthis.loadData(null);\r\n\t}\r\n```\r\n\r\nWe can change toaster config whenever needed.\r\n\r\nUse showToast() method of unite toast to show toast\r\n```\r\nthis.unitetoast.showToast();\r\n\r\n```\r\n\r\nUse hideToast() method of unite toast to hide toast forcefully\r\n```\r\nthis.unitetoast.showToast();\r\n\r\n```\r\n\r\n## How to use unite network-infromation to check internet connection.\r\n\r\nunite-framework provide us network-information provider to check availability of network.\r\nunite uses Netwok component from ionic-native, and also we need to add [network cordova plugin](http://ionicframework.com/docs/v2/native/network/).\r\nThere is a method named getNetworkInfo() that returns boolean value true or false. If internet is connected it will return true otherwise return false.\r\n\r\nopen app.ts and make the following changes!\r\n\r\nimport {NetworkInformation} from './unite-framework/network-information';\r\n```typescript\r\n@App({\r\n  templateUrl: 'build/app.html',\r\n  providers: [UniteMenu, NetworkInformation],\r\n  config: {} // http://ionicframework.com/docs/v2/api/config/Config/\r\n})\r\n```\r\nin app.ts upadate the constructor arguments like\r\n```typescript\r\nconstructor(private app: IonicApp, private platform: Platform, private networkInformation: NetworkInformation)\r\n```\r\n\r\nThen open articles-list.ts and make the following changes to start using the power of Unite Toast!\r\n```typescript\r\nimport {Page, NavController, NavParams} from 'ionic-angular';\r\nimport {UniteList} from '../../unite-framework/unitelist';\r\nimport {UniteToast} from '../../unite-framework/unitetoast';\r\nimport {NetworkInformation} from '../../unite-framework/network-information';\r\n\r\n@Page({\r\n  templateUrl: 'build/pages/articles-list/articles-list.html',\r\n  providers: [UniteList,UniteToast],\r\n})\r\n```\r\nin constructor add paramters like\r\n```typescript\r\nconstructor(private networkInformation: NetworkInformation)\r\n```\r\nthen we can use it like below\r\n```typescript\r\nif (this.networkInformation.getNetworkInfo()) {\r\n\t\t\tthis.unitelist.getData().then((value: any) => {\r\n\t\t\t\tif (value.data) {\r\n\t\t\t\t\tthis.items = this.items.concat(value.data.results);\r\n\t\t\t\t\tthis.enableifinitescroll = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (infiniteScroll) {\r\n\t\t\t\t\tinfiniteScroll.complete();\r\n\t\t\t\t\tif (!value.data){\r\n\t\t\t\t\t\tinfiniteScroll.enable(false);\r\n\t\t\t\t\t\tthis.enableifinitescroll = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t//console.log(value);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.unitetoast.toastOptions.message = \"Internet is disconnected!\";\r\n\t\t\tthis.unitetoast.showToast();\r\n\t\t}\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}